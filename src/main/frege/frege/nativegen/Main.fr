module frege.nativegen.Main where

import frege.Prelude hiding (Class, ClassLoader)
import frege.nativegen.NativeGen hiding (packageName)
import frege.nativegen.java.Lang
import frege.nativegen.java.Reflect
import Data.TreeMap as M()
import Data.List (intercalate, unique)
import Java.Util (List, Iterator)

abstract data KnownTypesParser = KnownTypesParser
  where
    parseLine line
      | (key, _:value) <- break (== '=') line.toList = do
        clsMaybe <- classFor $ packed key
        return $ fmap (\cls -> (cls.getName, parseValue cls (packed value))) clsMaybe
    parseLine _ = return Nothing

    parseKey key = classFor $ packed key

    parseValue cls "" = FregeType (classToFregeName cls) (Class.asRaw cls) Pure
    parseValue cls value = case break (== ',') value.toList of
      (purity, []) -> FregeType (classToFregeName cls) (Class.asRaw cls) (parsePurity $ packed purity)
      (purity, _:fname) -> FregeType (packed fname) (Class.asRaw cls) (parsePurity $ packed purity)

    classToFregeName cls
      | cls.isArray = "JArray " ++ cls.getComponentType.getCanonicalName
      | cls.isPrimitive = packed . applyHead _.toUpperCase . toList $ cls.getName
      | cls.isMemberClass = replace (unqualifiedName cls) "$" "_"
      | otherwise = unqualifiedName cls

    parsePurity "io" = Purity.IO
    parsePurity "st" = Purity.ST
    parsePurity _ = Purity.Pure

    parseKnownTypes fileName = do
      contents <- readFile fileName
      assocMaybes <- mapM parseLine $ lines contents
      return $ M.fromList $ catMaybes assocMaybes

prompt promptStr = do
  print promptStr
  stdout.flush
  getLine

writeModule :: M.TreeMap String FregeType -> String -> String -> String -> [RawClass] -> IO ()
writeModule m outputDir moduleName code deps = do
  let fileName = calculateFileName outputDir moduleName
  exists <- File.new fileName >>= File.exists
  pw <- createPrintWriter fileName
  let moduleDecl = "module " ++ moduleName ++ " where\n"
  when (not exists) (pw.println moduleDecl)
  writeImports m moduleName deps pw
  pw.println
  pw.println code
  pw.flush
  pw.close

convert :: M.TreeMap String FregeType -> String -> String -> IO ()
convert knownTypes packageName outputDir = do
  classes <- classesForPackage packageName >>= List.iterator >>= Iterator.toList
  let clsDeps clazz = do
                        let deps = genFrege knownTypes clazz
                            nmParts = nameParts clazz
                            moduleName = intercalate "." nmParts
                        return (moduleName, deps)
  deps <- mapM clsDeps classes
  let mergedDeps = M.each $ M.fromListWith (\(!c1, !d1) \(!c2, !d2) -> (c1 ++ "\n" ++ c2, d1 ++ d2)) deps
  forM_ mergedDeps (\(moduleName, (code, deps)) -> writeModule knownTypes outputDir moduleName code deps)

writeImports :: M.TreeMap String FregeType -> String -> [RawClass] -> PrintWriter -> IO ()
writeImports m moduleName deps pw = mapM_ write (unique modules) where
  write m | m == "java.Lang" || m == moduleName = return ()
  write modul = pw.println $ "import " ++ modul
  modules = deps >>= (typeToModule m [] . Class.asType . RawClass.asClass)

typeToModule :: M.TreeMap String FregeType -> [String] -> Type -> [String]
typeToModule m acc jtype
  | jtype <:? TypeVariable.getClass = acc
  | jtype <:? WildcardType.getClass = wildcardToModule m acc $ jtype `asInstanceOf` WildcardType.getClass
  | jtype <:? GenericArrayType.getClass = acc
  | jtype <:? ParameterizedType.getClass = parameterizedTypeToModule m acc $ jtype `asInstanceOf` ParameterizedType.getClass
  | jtype <:? Class.getClass = classToModule m acc $ jtype `asInstanceOf` Class.getClass
  | otherwise = acc

wildcardToModule :: M.TreeMap String FregeType -> [String] -> WildcardType -> [String]
wildcardToModule m acc wildcard
  | wildcard.getLowerBounds.length != 0 = typeToModule m acc wildcard.getLowerBounds.[0]
  | otherwise = typeToModule m acc wildcard.getUpperBounds.[0]

parameterizedTypeToModule :: M.TreeMap String FregeType -> [String] -> ParameterizedType -> [String]
parameterizedTypeToModule m acc ptype =
  typeToModule m acc ptype.getRawType ++ (ptype.getActualTypeArguments.toList >>= (\t -> typeToModule m [] t))

classToModule :: M.TreeMap String FregeType -> [String] -> Class a -> [String]
classToModule m acc clazz = (maybe unknown f $ m.lookup clazz.getName): acc
  where
    unknown = packageName clazz

    f :: FregeType -> String
    f fregeType = packageName fregeType.jtype.asClass

packageName :: Class a -> String
packageName cls | cls.isArray = packageName cls.getComponentType
packageName cls = intercalate "." $ nameParts cls

createPrintWriter fileName = do
  f <- File.new fileName
  f.getParentFile >>= (maybe (return false) (File.mkdirs))
  FileWriter.new fileName true >>= BufferedWriter.new >>= PrintWriter.new

calculateFileName :: String -> String -> String
calculateFileName outputDir moduleName = outputDir ++ "/" ++ (replace moduleName "." "/") ++ ".fr"

nameParts :: Class a -> [String]
nameParts clazz = init packageNameParts ++ [fileName] where
  packageNameParts = init . toList $ split clazz.getName "\\."
  fileName = capitalize $ last packageNameParts

data FileWriter = mutable native java.io.FileWriter where
  native new :: String -> Bool -> IO FileWriter throws IOException

data BufferedWriter = mutable native java.io.BufferedWriter where
  native new :: Writer -> IO BufferedWriter

capitalize :: String -> String
capitalize s | (h:t) <- s.toList  = packed $ h.toUpperCase : t
capitalize s = s

pure native toString :: a -> String
pure native split :: String -> String -> JArray String

native classesForPackage frege.nativegen.Main.packageClasses :: String -> STMutable s (List (Class a))

native module where {
  public static java.util.List<Class<?>> packageClasses(String packageName) {
    java.util.List<Class<?>> classes;
    try {

        /*
        classes = fj.control.parallel.parMap(
            com.google.common.reflect.ClassPath.from(Thread.currentThread().getContextClassLoader()).getTopLevelClassesRecursive(packageName),
            new fj.F<com.google.common.reflect.ClassPath.ClassInfo, Class<?>>(){
                public Class<?> f(com.google.common.reflect.ClassPath.ClassInfo a) {
                    return a.load();
                }
            }
        )
        */

        classes = fj.data.List.list(
            com.google.common.reflect.ClassPath.from(Thread.currentThread().getContextClassLoader())
            .getTopLevelClassesRecursive(packageName)
        ).map(new fj.F<com.google.common.reflect.ClassPath.ClassInfo, Class<?>>(){
            public Class<?> f(com.google.common.reflect.ClassPath.ClassInfo a) {
                return a.load();
            }
        }).filter(new fj.F<Class<?>, Boolean>(){
            public Boolean f(Class<?> cls) {
                return !cls.isSynthetic() && !cls.isAnonymousClass() && !cls.isLocalClass();
            }
        }).toJavaList();

/*
        classes = com.google.common.reflect.ClassPath.from(Thread.currentThread().getContextClassLoader())
                    .getTopLevelClassesRecursive(packageName)
                    .parallelStream()
                    .map(com.google.common.reflect.ClassPath.ClassInfo::load)
                    .filter(cls -> !cls.isSynthetic() && !cls.isAnonymousClass() && !cls.isLocalClass())
                    .collect(java.util.stream.Collectors.toList());
*/
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
    return classes;
  }
}

main (packageName: outputDir: _) = do
  knownTypes <- KnownTypesParser.parseKnownTypes "types.properties"
  classLoader <- ClassLoader.current
  convert knownTypes packageName outputDir

main (packageName: _) = main [packageName, "generated-sources"]

main [] = do
  packageName <- prompt "Package name: "
  main [packageName]
